package main

// Constants
// See "Geometric Numerical Integration" p. 13ff for the data for "The Outer Solar System"

const GravConst float32 = 2.95912208286 * 10E-4;

enum (
	Sun,
	Jupiter,
	Saturn,
	Uranus,
	Neptune,
	Pluto,
	NrOf,
) objectId;

type objectPhaseSpace algebra.VectorSpace(float32, 6);

type objectStr struct {
	name [10]char;
	mass float32;
	init objectPhaseSpace.Elem;
};

objects := [objectId.NrOf]objectStr {
      objectId.Sun: {
      		         name :"Sun",
			 mass : 1.00000597682, // sun + inner planets = 1 + ...
			 init : {0, 0, 0, 0, 0, 0};
      		},
      objectId.Jupiter: {
			 name : "Jupiter",
			 mass : 0.000954786104043,
			 init : {-3.5023653, -3.8169847, -1.5507963,
			          0.00565429 * mass, -0.00412490 * mass, 0.00190589 * mass},
};

func main() {

     // Create a single vector (q_1x, q_1y, q1_z, p_1x, ..., q_2x, ...)
     phaseSpace := algebra.DirectSum(objectId.NrOf * objectPhaseSpace);
     x := phaseSpace.Elem;

     for object := uint{0}; object < objectId.NrOf; object++ {
     	 x[object] = objects[object].init;
     }

     // Generate the Hamiltonian	
     // H =           T         -                   V
     //   = \Sum_i p_i^2 / 2m_i - G * \Sum_{i<j} m_i*m_j / |q_i - q_j|

     // T part of the Hamiltonian: \Sum_i p_i^2 / 2m_i
     // Create Diag. Matrix {0, 0, 0, 1/2m_1, 1/2m_1, 1/2m_1, 0, 0, 0 1/2m_2, ...}
     bilinearForms := algebra.TensorProduct(phaseSpace*, phaseSpace*);
     massMatrix bilinearForms.Elem.Diagonal;

     for diagEntry := uint{0}; diagEntry < phaseSpace.Dimension; diagEntry++ {
     	 object := objectId{diagEntry / objectPhaseSpace.Dimension};
	 objectDim := uint{diagEntry % objectPhaseSpace.Dimension};

	 if objectDim > 2 {
     	    massMatrix[diagEntry][diagEntry] = 1/(2 * objects[object].mass);
	 } else {
	    massMatrix[diagEntry][diagEntry] = 0;	
	 }
     }

     T := massMatrix(x, x);

     // V part of the Hamiltonian:  G * \Sum_{i<j} m_i*m_j / |q_i - q_j|
     // Create vector of unique differences
     // (q_1_1 - q_2_1, q_1_2 - q_2_2, q_1_3 - q_2_3, q_1_1 - q_3_1, ...),
     // where q_[ObjectNr]_[DimQ]
     
}

